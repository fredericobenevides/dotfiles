#+TITLE: Emacs Config
#+PROPERTY: header-args :tangle ./init.el

* Package Setup
#+begin_src emacs-lisp
  (require 'package)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

  ;; initialize built-in package management
  (package-initialize)

  ;; update packages list if we are on a new install
  (unless package-archive-contents
    (package-refresh-contents))

  ;; install use-package if is not installed
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  ;; load use-package
  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-verbose nil)

  ;; download automatically
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src


* Basic Settings
** Fonts

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "JetBrainsMono NF" :height 160)
  (set-face-attribute 'fixed-pitch nil :font "JetBrainsMono NF" :height 160)
  (set-face-attribute 'variable-pitch nil :font "JetBrainsMono NF" :height 160)
#+end_src

** Line Numbers
Show line numbers

#+begin_src emacs-lisp
  ;; Show column and line numbers
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some mode
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (global-hl-line-mode 1) ;; Enable hl
#+end_src

** Menu / Scrollbar
Disable menu and scrollbar

#+begin_src emacs-lisp
  (setq inhibit-startup-message t) ;; Don't show the startup message

  (add-to-list 'default-frame-alist '(fullscreen . maximized)) ;; maximize window

  (menu-bar-mode -1)    ;; Disable menu bar
  (scroll-bar-mode -1)  ;; Disable visible scrollbar
  (tool-bar-mode -1)    ;; Disable the toolbar
  (tooltip-mode +1)     ;; Disable tooltips

  (set-fringe-mode 10)
#+end_src

** Custom Files
Set the default custom file

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+end_src


* Modules
** Completion
*** ivy

#+begin_src emacs-lisp
  (use-package swiper)

  (use-package ivy
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (ivy-mode 1))
#+end_src

** UI
*** Icons

#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

*** Dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :config

    ;; list to show on dashboard
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)
                            (agenda . 5)))

    ;; show icons
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)

    ;; change banner
    (setq dashboard-startup-banner 'logo)

    ;; start dashboard
    (dashboard-setup-startup-hook))
#+end_src

*** Modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1))
#+end_src

*** Themes

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-dracula t))
#+end_src

** Editor
*** Command Log Mode

#+begin_src emacs-lisp
  (use-package command-log-mode
   :config
    (global-command-log-mode)
    :bind ("C-c o" . clm/toggle-command-log-buffer))
#+end_src

*** evil

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-fu) ;; make evil use undo-fu
    :config
    (evil-mode 1))
#+end_src

*** evil-collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src
*** expand-region
#+begin_src emacs-lisp
  (use-package expand-region
    :bind
    ("C-=" . er/expand-region)
    ("C--" . er/contract-region))
#+end_src
*** paren

#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

*** which-key
    
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

*** undo
#+begin_src emacs-lisp
(use-package undo-fu
  :config
  (define-key evil-normal-state-map "u" 'undo-fu-only-undo)
  (define-key evil-normal-state-map "U" 'undo-fu-only-redo))
#+end_src

** Tools
*** Magit

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

*** Projectile
For managing projects

#+begin_src emacs-lisp
  (use-package projectile
    :init
    (projectile-mode +1)
    :bind-keymap
    ("C-c p" . projectile-command-map))
#+end_src

*** Term

#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

** Org Mode
*** Basic Settings

#+begin_src emacs-lisp
  (setq org-startup-folded t)

  (setq org-startup-indented t) ;; ident for each level
  (setq org-startup-with-inline-images t)
#+end_src

*** org-superstar (Bullets)
    
#+begin_src emacs-lisp
  (use-package org-superstar
    :config
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+end_src

*** evil-org

#+begin_src emacs-lisp
  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

*** Auto tangle org file (save and load automatically)
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(when (y-or-n-p "Tangle?")(org-babel-tangle) (message "Reloading file") (load-file user-init-file))) nil t)
# End:
