#+TITLE: Emacs Config
#+PROPERTY: header-args :tangle ./init.el

* Bootstrap

#+begin_src emacs-lisp
  ;; bootstrap with straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; avoid issues with different verion from org
  (straight-use-package '(org :type built-in))

  ;;  Effectively replace use-package with straight-use-package
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src

* Emacs Basic Editor Settings

** Custom Files
Set the default custom file

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file) (load custom-file))
#+end_src

** Fonts

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height 140)
  (set-face-attribute 'fixed-pitch nil :font "JetBrainsMono Nerd Font" :height 140)
  (set-face-attribute 'variable-pitch nil :font "JetBrainsMono Nerd Font" :height 140)
#+end_src

** Quit

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)

  (setq confirm-kill-emacs 'yes-or-no-p)
#+end_src

* Themes
** doom-modeline

#+begin_src emacs_lisp
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1))
#+end_src

** doom-themes

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-dracula t))
#+end_src

** icons
Add icons to completion candidates using the built in completion metadata functions.

#+begin_src emacs-lisp
  (use-package nerd-icons
    :straight (nerd-icons
               :type git
               :host github
               :repo "rainstormstudio/nerd-icons.el")
    :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    (nerd-icons-font-family "Symbols Nerd Font Mono"))

    (use-package nerd-icons-completion
      :init (nerd-icons-completion-mode))
#+end_src

* GUI frames
** Suppress GUI Features

#+begin_src emacs-lisp
  (setq inhibit-startup-message t) ;; Don't show the startup message
#+end_src

** Menu / Scrollbar

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized)) ;; maximize window

  (menu-bar-mode -1)    ;; Disable menu bar
  (scroll-bar-mode -1)  ;; Disable visible scrollbar
  (tool-bar-mode -1)    ;; Disable the toolbar
  (tooltip-mode -1)     ;; Disable tooltips

  (set-fringe-mode 10)
#+end_src

* Editing
** Basic Settings

#+begin_src emacs-lisp
  (setq-default
   auto-save-default nil
   create-lockfiles nil
   column-number-mode t
   global-display-line-numbers-mode t
   indent-tabs-mode nil
   make-backup-files nil)
#+end_src

** command-log-mode

#+begin_src emacs-lisp
  (use-package command-log-mode
   :config
   (global-command-log-mode)
   :bind ("C-c o" . clm/toggle-command-log-buffer))
#+end_src

** expand-region

#+begin_src emacs-lisp
  (use-package expand-region
    :bind
    ("C-=" . er/expand-region)
    ("C--" . er/contract-region))
#+end_src

** lispy

#+begin_src emacs-lisp
  (use-package lispy)
#+end_src

** multiple-cursors

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :config
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C-S-w C-S-w") 'mc/mark-all-dwim)
    (global-set-key (kbd "C-S-e C-S-e") 'mc/edit-ends-of-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
    (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click))
#+end_src

** paren
Show matching parenthesis

#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

** rainbow-delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+end_src

** which-key
Displays the key bindings following your currently entered incomplete command (a prefix) in a popup

#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode)
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

** winner
Winner Mode is a global minor mode that allows you to “undo” and “redo” changes in WindowConfiguration

#+begin_src emacs-lisp
  (winner-mode 1)
#+end_src

* Term

** Load shell environment

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))
#+end_src

** vterm

#+begin_src emacs-lisp
  (use-package vterm)

  (use-package vterm-toggle
    :bind
      (("<M-f12>" . vterm-toggle)
        :map vterm-mode-map
        ("M-<" . vterm-toggle-forward)
        ("M->" . vterm-toggle-backward))
    :config
    (add-to-list 'display-buffer-alist
               '((lambda(bufname _) (with-current-buffer bufname (equal major-mode 'vterm-mode)))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  (direction . bottom)
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src

* Search/Completion
** vertico
Vertico provides a performant and minimalistic vertical completion UI based on the default completion system

#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode))
#+end_src

** consult

#+begin_src emacs-lisp
    (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flycheck)              ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )

  (use-package consult-flycheck)

  (use-package consult-eglot)
#+end_src

** marginalia
 Marginalia are marks or annotations placed at the margin of the page of a book
 or in this case helpful colorful annotations placed at the margin of the
 minibuffer for your completion candidates

#+begin_src emacs-lisp
  (use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))


  ;; The :init section is always executed.
  :init
  
  ;; This will ensure that it is on when marginalia-mode is on and is off when it’s off.
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup)

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))
#+end_src

** orderless
Provides a completion style that divides the pattern into space-separated
components, and matches candidates that match all of the components in any order

#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** corfu
Corfu enhances in-buffer completion with a small completion popup. The current
candidates are shown in a popup below or above the point.

#+begin_src emacs-lisp
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete)

    ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
    ;; try `cape-dict'.
    ;;(setq text-mode-ispell-word-completion nil)

    ;; Emacs 28 and newer: Hide commands in M-x which do not apply to the current
    ;; mode.  Corfu commands are hidden, since they are not used via M-x. This
    ;; setting is useful beyond Corfu.
    (setq read-extended-command-predicate #'command-completion-default-include-p))

  (use-package corfu
    ;; Optional customizations
    :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.=
    :init
    (global-corfu-mode))
#+end_src

* dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :straight
    (:host github :repo "emacs-dashboard/emacs-dashboard" :commit "a1c29c0bbfca3f6778022628b79e7eef2b9f351d")
    :config

    ;; list to show on dashboard
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)
                            (agenda . 5)))

    ;; show icons
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)

    ;; change banner
    (setq dashboard-startup-banner 'logo)

    ;; Content is not centered by default. To center, set
    (setq dashboard-center-content nil)

    ;; vertically center content
    (setq dashboard-vertically-center-content nil)

    ;; start dashboard
    (dashboard-setup-startup-hook))
#+end_src

* projectile
For managing projects

#+begin_src emacs-lisp
  (use-package projectile
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :config
    (projectile-mode 1))
#+end_src

* Git

#+begin_src emacs-lisp
  (use-package magit)

  (use-package magit-delta
    :hook (magit-mode . magit-delta-mode))
#+end_src

* neotree
A Emacs tree plugin like NerdTree for Vim.

#+begin_src emacs-lisp
  (use-package neotree
    :config
    (global-set-key (kbd "<f8>") 'neotree-toggle)
    (global-set-key (kbd "M-<f8>") 'neotree-refresh))
#+end_src

* Programming
** eglot

#+begin_src emacs-lisp
  (use-package eglot)
#+end_src

** emmet

#+begin_src emacs-lisp
  (use-package emmet-mode
    :after
    (web-mode css-mode))
#+end_src

** flycheck
Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs, intended
as replacement for the older Flymake extension which is part of GNU Emacs

#+begin_src emacs-lisp
  (use-package flycheck
    :config
    (add-hook 'after-init-hook #'global-flycheck-mode))

  (use-package flycheck-eglot
    :ensure t
    :after (flycheck eglot)
    :config
    (global-flycheck-eglot-mode 1))
#+end_src

** Javascript

#+begin_src emacs-lisp
  (use-package json-mode)
  ;;(use-package js2-mode)
  (use-package typescript-mode)
  (use-package prettier-js)

  (setq js-indent-level 2)

  (add-hook 'js-mode-hook 'eglot-ensure)
#+end_src

** HTML

#+begin_src emacs-lisp
  (use-package web-mode
    :mode
    (("\\.html?\\'" . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-enable-auto-expanding t)
    (setq web-mode-style-padding 2)
    (setq web-mode-script-padding 2)

    (setq web-mode-enable-current-column-highlight t)
    (setq web-mode-enable-current-element-highlight t)

    ;; integrated with emmet
    (add-hook 'web-mode-hook 'emmet-mode))
#+end_src

** CSS

#+begin_src emacs-lisp
  (setq css-indent-level 2)
  (setq css-indent-offset 2)
#+end_src


#+begin_src emacs-lisp
  (use-package lsp-tailwindcss
    :init
    (setq lsp-tailwindcss-add-on-mode t)
    ;;:config
    ;;(add-hook 'before-save-hook 'lsp-tailwindcss-rustywind-before-save)
    )
#+end_src

** clojure

#+begin_src emacs-lisp
  (use-package clojure-mode
    :config
    (add-hook 'clojure-mode-hook (lambda () (lispy-mode) (eglot-ensure)))
    (add-hook 'clojurescript-mode-hook (lambda () (lispy-mode) (eglot-ensure)))
    (add-hook 'clojurec-mode-hook (lambda () (lispy-mode) (eglot-ensure))))
    
  (use-package cider
    :config
    ;; disable cider showing eldoc during symbol at point
    (setq cider-eldoc-display-for-symbol-at-point nil)

    ;; go right to the REPL buffer when it's finished connecting
    (setq cider-repl-pop-to-buffer-on-connect t)

    ;; When there's a cider error, don't switch to the buffer
    (setq cider-show-error-buffer nil)
    (setq cider-auto-select-error-buffer nil))
#+end_src

** Http Server
Start local server

#+begin_src emacs-lisp
  (use-package simple-httpd
    :config
    (setq httpd-port 7070)
    (setq httpd-host (system-name)))
#+end_src

** impatient
See the effect of your HTML as you type it.

#+begin_src emacs-lisp
  (use-package impatient-mode
    :commands impatient-mode)
#+end_src


** markdown

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . gfm-mode)
           ("\\.markdown\\'" . gfm-mode))
    :init (setq markdown-command "pandoc"))

  (defun fb/markdown-filter (buffer)
    (princ
     (with-temp-buffer
       (let ((tmp (buffer-name)))
         (set-buffer buffer)
         (set-buffer (markdown tmp))
         (format "<!DOCTYPE html><html><title>Markdown preview</title><link rel=\"stylesheet\" href = \"https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.5.1/github-markdown.min.css\"/>
  <body><article class=\"markdown-body\" style=\"box-sizing: border-box;min-width: 200px;max-width: 980px;margin: 0 auto;padding: 45px;\">%s</article></body></html>" (buffer-string))))
     (current-buffer)))

  (defun fb/markdown-preview ()
    "Preview markdown."
    (interactive)
    (unless (process-status "httpd")
      (httpd-start))
    (impatient-mode)
    (imp-set-user-filter 'fb/markdown-filter)
    (imp-visit-buffer))

  (defun fb/markdown-preview-stop ()
    "Stop preview"
    (interactive)
    (unless (process-status "httpd")
      (httpd-stop))
    (impatient-mode -1))
#+end_src

* Org Mode
** Basic Settings

#+begin_src emacs-lisp
(package-install 'org)  (setq org-startup-folded t)

  (setq org-startup-indented t) ;; ident for each level
  (setq org-startup-with-inline-images t)
#+end_src

** org-superstar (Bullets)

#+begin_src emacs-lisp
  (use-package org-superstar
    :config
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+end_src

** Auto tangle org file (save and load automatically)

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(when (y-or-n-p "Tangle?")(org-babel-tangle) (message "Reloading file") (load-file user-init-file))) nil t)
# End:



