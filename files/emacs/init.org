#+TITLE: EMACS Config
#+PROPERTY: header-args :tangle ./init.el

* Bootstrap

#+begin_src emacs-lisp
  ;; bootstrap with straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; avoid issues with different verion from org
  (straight-use-package '(org :type built-in))

  ;;  Effectively replace use-package with straight-use-package
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src

* Optimizations
#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000)

  (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src
* Emacs Basic Editor Settings
** Custom Files
Set the default custom file

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file) (load custom-file))
#+end_src

** Edit Settings

#+begin_src emacs-lisp
  (setq-default
   auto-save-default nil
   create-lockfiles nil
   column-number-mode t
   fill-column 80
   indent-tabs-mode nil
   make-backup-files nil)

  ;; broken automatically when the line becomes too wide
  (auto-fill-mode)

  ;; show line numbers
  (global-display-line-numbers-mode)

  ;; pair mode
  (electric-pair-mode)

  ;; enables highlighting for the current buffer
  (when window-system (global-hl-line-mode t))

  ;; auto refresh buffers when file changed on disk
  (global-auto-revert-mode t)
#+end_src

** Fonts

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height 140)
  (set-face-attribute 'fixed-pitch nil :font "JetBrainsMono Nerd Font" :height 140)
  (set-face-attribute 'variable-pitch nil :font "JetBrainsMono Nerd Font" :height 140)
#+end_src

** Quit

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)

  (setq confirm-kill-emacs 'yes-or-no-p)
#+end_src

* GUI frames
** Suppress GUI Features

#+begin_src emacs-lisp
  (setq inhibit-startup-message t) ;; Don't show the startup message
#+end_src

** Menu / Scrollbar

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized)) ;; maximize window

  (menu-bar-mode -1)    ;; Disable menu bar
  (scroll-bar-mode -1)  ;; Disable visible scrollbar
  (tool-bar-mode -1)    ;; Disable the toolbar
  (tooltip-mode -1)     ;; Disable tooltips

  (set-fringe-mode 10)
#+end_src

* Packages
** Console
*** Load shell environment
A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user's shell.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))
#+end_src

*** vterm
Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU Emacs based
on libvterm, a C library. As a result of using compiled code (instead of elisp),
emacs-libvterm is fully capable, fast, and it can seamlessly handle large outputs.

#+begin_src emacs-lisp
  (use-package vterm)

  (use-package vterm-toggle
    :bind
      (("<M-f12>" . vterm-toggle)
        :map vterm-mode-map
        ("M-<" . vterm-toggle-forward)
        ("M->" . vterm-toggle-backward))
    :config
    (add-to-list 'display-buffer-alist
               '((lambda(bufname _) (with-current-buffer bufname (equal major-mode 'vterm-mode)))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  (direction . bottom)
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src

** Completion/Search
*** corfu
Corfu enhances the default completion in region function with a completion overlay.

#+begin_src emacs-lisp
  (use-package emacs
   :init
   ;; TAB cycle if there are only few candidates
   (setq completion-cycle-threshold 3)

   ;; Enable indentation+completion using the TAB key.
   ;; `completion-at-point' is often bound to M-TAB.
   (setq tab-always-indent 'complete)

   ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
   ;; try `cape-dict'.
   ;;(setq text-mode-ispell-word-completion nil)

   ;; Emacs 28 and newer: Hide commands in M-x which do not apply to the current
   ;; mode.  Corfu commands are hidden, since they are not used via M-x. This
   ;; setting is useful beyond Corfu.
   (setq read-extended-command-predicate #'command-completion-default-include-p))

  (use-package corfu
   ;; Optional customizations
   :custom
   ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
   (corfu-auto t)                 ;; Enable auto completion
   ;; (corfu-separator ?\s)          ;; Orderless field separator
   ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
   ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
   ;; (corfu-preview-current nil)    ;; Disable current candidate preview
   ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
   ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
   ;; (corfu-scroll-margin 5)        ;; Use scroll margin

   ;; Enable Corfu only for certain modes.
   ;; :hook ((prog-mode . corfu-mode)
   ;;        (shell-mode . corfu-mode)
   ;;        (eshell-mode . corfu-mode))

   ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
   ;; be used globally (M-/).  See also the customization variable
   ;; `global-corfu-modes' to exclude certain modes.=
   :init
   (global-corfu-mode))
#+end_src

*** consult
Consult provides various practical commands based on the Emacs completion function completing-read.

#+begin_src emacs-lisp
    (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flycheck)              ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )

  (use-package consult-flycheck)
#+end_src

*** marginalia
 Show document of function in ==M-x=, or file attributes in C-x C-f.

#+begin_src emacs-lisp
  (use-package marginalia
    :after
    (nerd-icons-completion)

    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; This will ensure that it is on when marginalia-mode is on and is off when it’s off.
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup)

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src

*** orderless
Use space-separated search terms in any order when completing with Icomplete or the default interface.

#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

*** vertico
Vertico provides a minimalistic vertical completion UI, which is based on the default completion system. 

#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode))
#+end_src

** Editing Enhacement
*** expand-region
Expand region increases the selected region by semantic units. Just keep pressing the key until it selects what you want.

#+begin_src emacs-lisp
  (use-package expand-region
    :bind
    ("C-=" . er/expand-region)
    ("C--" . er/contract-region))
#+end_src

*** multiple-cursors
Mark, edit multiple lines at once.

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :config
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C-S-w C-S-w") 'mc/mark-all-dwim)
    (global-set-key (kbd "C-S-e C-S-e") 'mc/edit-ends-of-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
    (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click))
#+end_src

*** paren
Show matching parenthesis

#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

*** rainbow-delimiters
Highlights parentheses, brackets, and braces according to their depth.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+end_src

** File Manager
*** neotree
A Emacs tree plugin like NerdTree for Vim.

#+begin_src emacs-lisp
  (use-package neotree
    :config
    (global-set-key (kbd "<f8>") 'neotree-toggle)
    (global-set-key (kbd "M-<f8>") 'neotree-refresh))
#+end_src

** Interface Enhacement
*** dashboard
A startup dashboard which provides certain information about your recent Emacs activities.

#+begin_src emacs-lisp
  (use-package dashboard
    :straight
    (:host github :repo "emacs-dashboard/emacs-dashboard" :commit "a1c29c0bbfca3f6778022628b79e7eef2b9f351d")
    :config

    ;; list to show on dashboard
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)
                            (agenda . 5)))

    ;; show icons
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)

    ;; change banner
    (setq dashboard-startup-banner 'logo)

    ;; Content is not centered by default. To center, set
    (setq dashboard-center-content nil)

    ;; vertically center content
    (setq dashboard-vertically-center-content nil)

    ;; start dashboard
    (dashboard-setup-startup-hook))
#+end_src

*** beacon
Whenever the window scrolls a light will shine on top of your cursor so you know where it is.

#+begin_src emacs-lisp
  (use-package beacon
    :config (beacon-mode))
#+end_src
** Log
*** command-log-mode
Show event history and command history of some or all buffers.

#+begin_src emacs-lisp
  (use-package command-log-mode
   :config
   (global-command-log-mode)
   :bind ("C-c o" . clm/toggle-command-log-buffer))
#+end_src
** Programming
*** emacs-gdb
#+begin_src emacs-lisp
  (use-package gdb-mi
  :straight (:host github :repo "weirdNox/emacs-gdb" :files ("*.el" "*.c" "*.h" "Makefile"))
  :init
  (fmakunbound 'gdb)
  (fmakunbound 'gdb-enable-debug))
#+end_src

*** flycheck
Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs, intended
as replacement for the older Flymake extension which is part of GNU Emacs

#+begin_src emacs-lisp
  (use-package flycheck
    :config
    (add-hook 'after-init-hook #'global-flycheck-mode))
#+end_src

*** impatient
See the effect of your HTML as you type it.

#+begin_src emacs-lisp
  (use-package impatient-mode
    :commands impatient-mode)
#+end_src

**** Http Server
Start local server

#+begin_src emacs-lisp
  (use-package simple-httpd
    :config
    (setq httpd-port 7070)
    (setq httpd-host (system-name)))
#+end_src

*** lsp-ui

#+begin_src emacs-lisp
  (use-package lsp-ui)
#+end_src
*** lsp-mode
Client for Language Server Protocol (v3.14). lsp-mode aims to provide IDE-like
experience

#+begin_src emacs-lisp
  (use-package lsp-mode
    :custom
    (lsp-completion-provider :none) ;; we use Corfu!
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")

    (defun my/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
            '(orderless))) ;; Configure orderless
    :config
    (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
    :hook (
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration)
           (lsp-completion-mode . my/lsp-mode-setup-completion)

           (web-mode . lsp-deferred)
           (css-mode . lsp-deferred)
           (rust-mode . lsp-deferred)))
#+end_src

*** lispy
This package reimagines Paredit - a popular method to navigate and edit LISP code in Emacs.

#+begin_src emacs-lisp
  (use-package lispy)
#+end_src

*** yasnippet
YASnippet is a template system for Emacs. It allows you to type an abbreviation
and automatically expand it into function templates. Bundled language templates
include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more

#+begin_src emacs-lisp
    (use-package yasnippet
      :init
      (yas-global-mode 1))
#+end_src

** Programming Languages
*** Web Development
**** emmet
Emmet is a web-developer’s toolkit for boosting HTML & CSS code writing. With Emmet,
you can type expressions (abbreviations) similar to CSS selectors and convert them
into code fragment with a single keystroke.

#+begin_src emacs-lisp
  (use-package emmet-mode
    :after
    (web-mode css-mode))
#+end_src

**** web-mode
Major mode for editing various html templates.

#+begin_src emacs-lisp
  (use-package web-mode
    :mode
    (("\\.html?\\'" . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-enable-auto-expanding t)
    (setq web-mode-style-padding 2)
    (setq web-mode-script-padding 2)

    (setq web-mode-enable-current-column-highlight t)
    (setq web-mode-enable-current-element-highlight t)

    ;; integrated with emmet
    (add-hook 'web-mode-hook 'emmet-mode))
#+end_src

**** css configs

#+begin_src emacs-lisp
  (setq css-indent-level 2)
  (setq css-indent-offset 2)
#+end_src

**** tailwindcss

#+begin_src emacs-lisp
  (use-package lsp-tailwindcss
    :init
    (setq lsp-tailwindcss-add-on-mode t)
    :config
    ;; (add-hook 'before-save-hook 'lsp-tailwindcss-rustywind-before-save)
    (setq lsp-tailwindcss-major-modes '(web-mode html-mode sgml-mode css-mode rjsx-mode)))
#+end_src

**** prettier

#+begin_src emacs-lisp
  (use-package prettier
    :config
    (add-hook 'css-mode-hook 'prettier-mode)
    (add-hook 'js-mode-hook 'prettier-mode)
    (add-hook 'json-mode-hook 'prettier-mode)
    (add-hook 'web-mode-hook 'prettier-mode))
#+end_src

*** Javascript

#+begin_src emacs-lisp
  (use-package json-mode)
  ;;(use-package js2-mode)
  (use-package typescript-mode)

  (setq js-indent-level 2)
#+end_src

*** clojure
**** clojure-mode
clojure-mode is an Emacs major mode that provides font-lock (syntax highlighting),
indentation, navigation and refactoring support for the Clojure(Script) programming language.

#+begin_src emacs-lisp
  (use-package clojure-mode)
#+end_src

**** cider
CIDER is the Clojure(Script) Interactive Development Environment that Rocks!

#+begin_src emacs-lisp
  (use-package cider
    :config
    ;; disable cider showing eldoc during symbol at point
    (setq cider-eldoc-display-for-symbol-at-point nil)

    ;; go right to the REPL buffer when it's finished connecting
    (setq cider-repl-pop-to-buffer-on-connect t)

    ;; When there's a cider error, don't switch to the buffer
    (setq cider-show-error-buffer nil)
    (setq cider-auto-select-error-buffer nil))
#+end_src

**** clj-refactor
clj-refactor provides powerful refactoring functionality for Clojure projects.
It complements the refactoring functionality you'd find in clojure-mode and CIDER.

#+begin_src emacs-lisp
  (defun my-clojure-mode-hook ()
      (clj-refactor-mode 1)
      (yas-minor-mode 1) ; for adding require/use/import statements
      ;; This choice of keybinding leaves cider-macroexpand-1 unbound
      (cljr-add-keybindings-with-prefix "C-c C-m"))

  (use-package clj-refactor
    :config
    (setq cljr-warn-on-eval nil) ; disable warning
    (add-hook 'clojure-mode-hook #'my-clojure-mode-hook))
#+end_src

*** markdown

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . gfm-mode)
           ("\\.markdown\\'" . gfm-mode))
    :init (setq markdown-command "pandoc"))

  (defun fb/markdown-filter (buffer)
    (princ
     (with-temp-buffer
       (let ((tmp (buffer-name)))
         (set-buffer buffer)
         (set-buffer (markdown tmp))
         (format "<!DOCTYPE html><html><title>Markdown preview</title><link rel=\"stylesheet\" href = \"https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.5.1/github-markdown.min.css\"/>
  <body><article class=\"markdown-body\" style=\"box-sizing: border-box;min-width: 200px;max-width: 980px;margin: 0 auto;padding: 45px;\">%s</article></body></html>" (buffer-string))))
     (current-buffer)))

  (defun fb/markdown-preview ()
    "Preview markdown."
    (interactive)
    (unless (process-status "httpd")
      (httpd-start))
    (impatient-mode)
    (imp-set-user-filter 'fb/markdown-filter)
    (imp-visit-buffer))

  (defun fb/markdown-preview-stop ()
    "Stop preview"
    (interactive)
    (unless (process-status "httpd")
      (httpd-stop))
    (impatient-mode -1))
#+end_src

*** rust
**** rust-mode
rust-mode makes editing Rust code with Emacs enjoyable

#+begin_src emacs-lisp
  (defun my-cargo-run ()
    "Build and run Rust code."
    (interactive)
    (cargo-process-run)
    (let ((orig-win (selected-window))
          (run-win (display-buffer (get-buffer "*Cargo Run*") nil 'visible)))
      (select-window run-win)
      (comint-mode)
      (read-only-mode 0)
      (end-of-buffer)))

  (use-package rust-mode
    :config
    (setq rust-format-on-save t)

    ;;(add-hook 'rust-mode-hook (lambda () (prettify-symbols-mode)))

    (define-key rust-mode-map (kbd "C-c C-c C-q") 'my-cargo-run))
#+end_src

**** cargo
Emacs minor mode which allows to dynamically select a Cargo command.

#+begin_src emacs-lisp
  (use-package cargo
    :config
    (add-hook 'rust-mode-hook 'cargo-minor-mode)) 
#+end_src

**** flycheck-rust
This Flycheck extension configures Flycheck automatically for the current Cargo project.

#+begin_src emacs-lisp
  (use-package flycheck-rust
    :init
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+end_src

** Project management
*** projectile
For managing projects

#+begin_src emacs-lisp
  (use-package projectile
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :config
    (projectile-mode 1))
#+end_src

** Themes
*** doom-modeline

#+begin_src emacs_lisp
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1))
#+end_src

*** doom-themes

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-dracula t))
#+end_src

*** icons
Add icons to completion candidates using the built in completion metadata functions.

#+begin_src emacs-lisp
  (use-package nerd-icons
    :straight
    (nerd-icons :type git :host github :repo "rainstormstudio/nerd-icons.el")
    :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    (nerd-icons-font-family "Symbols Nerd Font Mono"))

    (use-package nerd-icons-completion
      :after
      (nerd-icons)
      :init
      (nerd-icons-completion-mode))
#+end_src

** Utilities
*** which-key
Displays the key bindings following your currently entered incomplete command (a prefix) in a popup

#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode)
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

** Version control
*** Git

#+begin_src emacs-lisp
  (use-package magit)

  ;;(use-package  magit-delta
  ;;  :after (magit)
  ;;  :hook (magit-mode . magit-delta-mode))
#+end_src

** Window Frame Management
*** winner
Winner Mode is a global minor mode that allows you to “undo” and “redo” changes in WindowConfiguration

#+begin_src emacs-lisp
  (winner-mode 1)
#+end_src

** Org Mode

#+begin_src emacs-lisp
  (package-install 'org)

  (setq
   ;; Edit settings
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-confirm-babel-evaluate nil
   org-special-ctrl-a/e t
   org-startup-indented t
   org-startup-folded t
   ;;      org-startup-with-inline-images t
   org-insert-heading-respect-content t

   ;; Org styling, hide markup etc.
   org-hide-emphasis-markers t
   org-pretty-entities t
   org-ellipsis "…"

   ;; Agenda styling
   org-agenda-tags-column 0
   org-agenda-block-separator ?─
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
   org-agenda-current-time-string
   "◀── now ─────────────────────────────────────────────────")
#+end_src

*** org-download
#+begin_src emacs-lisp
  (use-package org-download
    :config
    (add-hook 'dired-mode-hook 'org-download-enable))
#+end_src

*** org-modern

#+begin_src emacs-lisp
  (use-package org-modern
    :config
    (add-hook 'org-mode-hook #'org-modern-mode)
    (add-hook 'org-agenda-finalize-hook #'org-modern-agenda))
#+end_src

*** org-roam

#+begin_src emacs-lisp
  (use-package org-roam
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture))
    :config
    (setq org-roam-directory (file-truename "~/.dotfiles/external_files/org"))
    (setq org-roam-completion-everywhere t)
    (org-roam-db-autosync-mode))

  (use-package org-roam-ui)
#+end_src
*** Auto tangle org file (save and load automatically)

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(when (y-or-n-p "Tangle?")(org-babel-tangle) (message "Reloading file") (load-file user-init-file))) nil t)
# End:



