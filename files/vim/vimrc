" Vim-plug Configs {{{1
if has('nvim')
  call plug#begin('~/.local/share/nvim/plugged')
else
  call plug#begin('~/.vim/plugged')
endif

" Colors and themes {{{2
Plug 'tomasr/molokai'
Plug 'bling/vim-airline'
" }}}2

" Editor Utilities {{{2
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }
else
  Plug 'Valloric/YouCompleteMe', { 'do': './install.py --gocode-completer' }
endif

Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/vim-easy-align', { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }
Plug 'majutsushi/tagbar'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'terryma/vim-multiple-cursors'
Plug 'w0rp/ale'
" }}}2

" FZF {{{2}}}
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': '~/.dotfiles/files/fzf/install.sh' }
Plug 'junegunn/fzf.vim'
" }}}2

" Git {{{2
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'mattn/webapi-vim' | Plug 'mattn/gist-vim'
Plug 'junegunn/gv.vim'
" }}}2

" Go {{{2
Plug 'fatih/vim-go'
" }}}2

" Html & css {{{2
Plug 'othree/html5.vim'
Plug 'mattn/emmet-vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'cakebaker/scss-syntax.vim'
" }}}2

" Javascript {{{2
Plug 'pangloss/vim-javascript'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }
Plug 'mxw/vim-jsx'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'posva/vim-vue'
" }}}2

" Ruby and Rails {{{2
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
" }}}2

" Snippets {{{2
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
" }}}2
"
" Tpope Utilities {{{2
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'

if has('nvim')
  Plug 'radenling/vim-dispatch-neovim'
endif
" }}}2

" Tmux integration {{{2
if !has('nvim')
  Plug 'benmills/vimux'
  Plug 'christoomey/vim-tmux-navigator'
endif
"}}}2

" Neovim's terminal integration {{{2
if has('nvim')
  Plug 'kassio/neoterm'
endif
" }}}2

call plug#end()
" }}}1

" Color and themes configs {{{1
syntax on
set t_Co=256
colorscheme molokai
" }}}1

" Config settings {{{1

" Disable netrw {{{2
let g:loaded_netrw = 1
let g:loaded_netrwPlugin = 1
" }}}2

" Backup Settings {{{2
set nobackup
set nowritebackup
set noswapfile
" }}}2

" Buffer and Edit Settings {{{2
set autoread " Automatically read a file that has changed on disk
set backspace=indent,eol,start " backspace working like other apps
set hidden " Allow unsaved buffers to be put in background
set cursorline
set completeopt-=preview " stop showing the preview window using YCM
set cpoptions+=$ " put $ at the end of the changed word
let loaded_matchparen = 1 " disable the match for parentheses
set nrformats= " treat all numerals as decimal

" copy default to clipboard
if has('unnamedplus')
  set clipboard=unnamedplus
else
  set clipboard=unnamed
endif
" }}}2

" Enconding Settings {{{2
set encoding=utf-8
set fileencoding=utf-8
" }}}2

" Fold Settings {{{2
set foldmethod=syntax
set foldlevelstart=1
" }}}2

" History and Undo Settings {{{2
set history=1000
set undolevels=100
" }}}2

" Indent and Tab Settings {{{2
set autoindent " Copy indent from current line when starting a new line
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
" }}}2

" List Settings {{{2
set list
set listchars=tab:»\ ,trail:·
" }}}2

" Mouse settings {{{2
set mousehide " hide the cursor while typing
set mouse=a " enable mouse inside vim
" }}}2

" Neovim's  Terminal settings {{{2
if has('nvim')
  highlight! link TermCursor Cursor
  highlight! TermCursorNC guibg=red guifg=white ctermbg=1 ctermfg=15
endif
" }}}2

" Search Settings {{{2
set hlsearch " highlight all matches
set ignorecase " case of letters are ignore
set incsearch " while typing the pattern, show where it matches
set smartcase " override the ignorecase when search pattern has upper case
set scrolloff=5 " number of screen lines to keep above and below the cursor
" }}}2

" Split Settings {{{2
set splitbelow
set splitright
" }}}2

" Sound Settings {{{2
set noerrorbells
set visualbell
set vb t_vb= " this disable the sound and flash from noerrorbells and visualbell
" }}}2

" Wildmenu Settings {{{2
set wildmenu
set wildmode=list:longest,list:full
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
" }}}2

" Window Settings {{{2
set title " Add the window title with the name of the file that is editing
set guioptions-=T " disable toolbar
set guioptions-=r " disable right-hand scrollbar
set guioptions-=L " disable left-hand scrollbar
set laststatus=2 " Always show the status line
set lazyredraw " don't update the display while executing macros
set number " show the current line number
set relativenumber " show the line number relative to the line with the cursor

if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor " Integrate with ag
endif
" }}}2

" Wrap Settings {{{2
set wrap
set textwidth=80
set formatoptions=qrn1
set colorcolumn=80
" }}}2
" }}}1

" Mappings {{{1

" Remap leader to <space> {{{2
let mapleader = " "
" }}}2

" Double spaces remove highlight {{{2
nnoremap <silent> <leader><space> :noh<cr>
" }}}2

" Disable Arrow Keys {{{2
inoremap <Up> <nop>
inoremap <Down> <nop>
inoremap <Left> <nop>
inoremap <Right> <nop>
" }}}2

" Mappings for F1-12 {{{2

" disable F1 to not call help
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

nnoremap <F6> :NERDTreeToggle<cr>
nnoremap <F7> :NERDTreeFind<cr>
nnoremap <F8> :TagbarToggle<CR>
" }}}2

" Editing a file {{{2

" Remap Line motion commands
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j

" Save files with sudo
cnoremap w!! w !sudo tee % >/dev/null

" Add ';' at the end of line
inoremap <leader>; <C-o>m`<C-o>A;<C-o>``

" Toggle Paste
nnoremap <leader>tp :set invpaste paste?<cr>
set pastetoggle=<leader>tp

" Toggle Wrap
nnoremap <leader>tw :set wrap! wrap?<cr>

" Find duplicate words
nnoremap <leader>dw /\v<(\w+)\_s+\1><cr>

" Find current word
nnoremap <leader>fw /\v<C-r><C-w><cr>

" Substitute current word
nnoremap <leader>sw :%s/\v<C-r><C-w>
" }}}2

" Buffer Mappings {{{2

" Creating a new buffer
nnoremap <leader>bn :vnew<cr>  |" Open a new buffer in a new vertical window
nnoremap <leader>bN :new<cr>   |" Open a new buffer in a new horizontal window

" Deleting the buffer
nnoremap <leader>bd :bd<cr>   |" Delete the buffer
nnoremap <leader>bD :bd!<cr>  |" Forces to delete the buffer

" Moving around the buffers
nnoremap [b :bp<cr>              |" go to the previous buffer
nnoremap ]b :bn<cr>              |" go to the next buffer
nnoremap [B :bfirst<cr>          |" go to the first buffer
nnoremap ]B :blast<cr>           |" go to the last buffer
nnoremap <leader>bh :bp<cr>      |" Move to the previous buffer
nnoremap <leader>bl :bn<cr>      |" Move to the next buffer
nnoremap <leader>bH :bfirst<cr>  |" Move to the previous buffer
nnoremap <leader>bL :blast<cr>   |" Move to the next buffer
nnoremap <leader>ba <c-^><cr>    |" Alternate between buffers
" }}}2

" Windows Mappings {{{2

" Opening and closing a window
nnoremap <leader>wc <c-w>c     |" close the window
nnoremap <leader>wn :vnew<cr>  |" new horizontally window
nnoremap <leader>wN :new<cr>   |" new vertically window

" splitting current window
nnoremap <leader>ws <c-w><c-s><cr>  |" split curent window horizontally
nnoremap <leader>wv <c-w><c-v><cr>  |" split current window vertically

" change cursor around windows
nnoremap [w <c-w>W              |" go to the previous window
nnoremap ]w <c-w><c-w>          |" go to the next window
nnoremap <leader>wa <c-w><c-p>  |" Alternate between windows
nnoremap <leader>wo <c-w>o      |" window only
nnoremap <leader>wr <c-w>r      |" window rotate
nnoremap <leader>wx <c-w>x      |" window eXchange

" move windows around the screen
nnoremap <leader>wmj <c-w>J  |" move to bottom window
nnoremap <leader>wmk <c-w>K  |" move to top window
nnoremap <leader>wmh <c-w>H  |" move to left window
nnoremap <leader>wml <c-w>L  |" move to right window
nnoremap <leader>wmt <c-w>T  |" move current window to a tab

" resize windows
nnoremap <leader>wW <c-w>\|          |" Expand the width of the Window
nnoremap <leader>wH :resize 100<cr>  |" Expand the height of the Window
nnoremap <leader>w= <c-w>=           |" Make all windows equally high and wide
nnoremap <Up>    <c-w>-              |" Decrease current window width
nnoremap <Down>  <c-w>+              |" Decrease current window width
nnoremap <Left>  <c-w>>              |" Decrease current window width
nnoremap <Right> <c-w><              |" Decrease current window width

" windows switching
nnoremap <C-h> <c-w>h
nnoremap <C-j> <c-w>j
nnoremap <C-k> <c-w>k
nnoremap <C-l> <c-w>l
if has('nvim')
  tnoremap <C-h> <c-\><c-n><c-w>h
  tnoremap <C-j> <c-\><c-n><c-w>j
  tnoremap <C-k> <c-\><c-n><c-w>k
  tnoremap <C-l> <c-\><c-n><c-w>l
endif

" }}}2

" Tabs Mappings {{{2

" Opening and closing a tab
nnoremap <leader>tc :tabclose<cr>  |" close current tab
nnoremap <leader>tn :tabnew<cr>    |" create a new empty tab
nnoremap <leader>to :tabonly<cr>   |" close all others tab but this

" Moving betwen tabs
nnoremap [t :tabp<cr>              |" go to the previous tab
nnoremap ]t :tabn<cr>              |" go to the next tab
nnoremap [T :tabfirst<cr>          |" go to the first tab
nnoremap ]T :tablast<cr>           |" go to the last tab
nnoremap <leader>th :tabp<cr>      |" go to the previous tab
nnoremap <leader>tl :tabn<cr>      |" go to the next tab
nnoremap <leader>tH :tabfirst<cr>  |" go to the previous tab
nnoremap <leader>tL :tablast<cr>   |" go to the next tab

" Moving the tabs
nnoremap <leader>tmh :tabmove -1<cr>  |" move tab to the left
nnoremap <leader>tml :tabmove +1<cr>  |" move tab to the right
" }}}2
"
" Neovim's Terminal Mappings {{{2
if has('nvim')
  tnoremap <Esc> <C-\><C-n>
  tnoremap <C-v><Esc> <Esc>
endif
" }}}2

" Vim Mappings {{{2
nnoremap <leader>ev :tabe $MYVIMRC<cr>  |" Edit vimrc file in a new tab
nnoremap <leader>sv :so $MYVIMRC<cr>    |" Source vimrc
" }}}2
" }}}1

" Plugins Settings {{{1

" Plugin ale {{{2
let g:ale_linteres = {
\  'javascript': ['eslint']
\}
let g:ale_fixers = {
\  'javascript': ['eslint'],
\  'vue': ['eslint']
\}
let g:ale_fix_on_save = 1
let g:ale_sign_column_always = 1
" }}}2

" Plugin deoplete {{{2
if has('nvim')

  " deoplete settings
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#enable_smart_case = 1

  "Add extra filetypes
  let g:deoplete#sources#ternjs#filetypes = [
  \ 'javascript',
  \ 'jsx',
  \ 'javascript.jsx',
  \ 'vue',
  \ ]

endif

" Plugin Easy-align {{{2
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
" }}}2

" Plugin Emmet {{{2
let g:user_emmet_leader_key='<c-e>'
let g:user_emmet_expandabbr_key='<c-e>'
let g:user_emmet_settings = {
\  'javascript.jsx' : {
\      'extends' : 'jsx',
\  },
\}
" }}}2

" Plugin FZF {{{2
map <C-p> :Files<cr>
nmap <C-p> :Files<cr>

" View commits in fzf
nmap <Leader>c :Commits<cr>

" Complete from open tmux panes (from @junegunn)
inoremap <expr> <C-x><C-t> fzf#complete( 'tmuxwords.rb -all-but-current --scroll 499 --min 5')

inoremap <expr> <C-x><C-k> fzf#complete ('cat /usr/share/dict/words')

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})
" }}}2

" Plugin neosnippet {{{2
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

imap <expr><TAB>
 \ pumvisible() ? "\<C-n>" :
 \ neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

smap <expr><TAB> neosnippet#expandable_or_jumpable() ?  "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
" }}}2

" Plugin NERDTree {{{2
let NERDTreeShowHidden = 1 " show hidden files
let NERDTreeQuitOnOpen = 1 " close after opening a file
let NERDTreeIgnore=['\.class$']
" }}}2

" Plugin RSpec.vim {{{2
let g:rspec_command = 'call VimuxRunCommand("rspec {spec}\n")'
" map <Leader>t :call RunCurrentSpecFile()<cr>
" map <Leader>s :call RunNearestSpec()<cr>
" map <Leader>l :call RunLastSpec()<cr>
" map <Leader>a :call RunAllSpecs()<cr>
" }}}2

" Plugin UltiSnips {{{2
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" let g:UltiSnipsEditSplit="vertical"
" }}}2

" Plugin YouCompleteMe {{{2
let g:ycm_key_list_select_completion = []
let g:ycm_key_list_previous_completion = []
" }}}2

" Plugin Vim-go {{{2
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
" }}}2

" Plugin vim-indent-guides {{{2
let g:indent_guides_auto_colors = 0
" }}}2

" Plugin vim-jsx {{{2
let g:jsx_ext_required = 0
" }}}2

" Plugin Vimux {{{2
map <Leader>vp :VimuxPromptCommand<cr>      |" Prompt for a command to run
map <Leader>vl :VimuxRunLastCommand<cr>     |" Run last command executed
map <Leader>vi :VimuxInspectRunner<cr>      |" Inspect runner pane
map <Leader>vq :VimuxCloseRunner<cr>        |" Close vim tmux runner opened
map <Leader>vx :VimuxInterruptRunner<cr>    |" Interrupt any command running
map <Leader>vz :call VimuxZoomRunner()<cr>  |" Zoom the runner pane
" }}}2

" Plugin neoterm {{{2
nnoremap <leader>nc :<c-u>exec v:count.'Tclear'<cr>
nnoremap <leader>nC :<c-u>exec v:count.'Tclose'<cr>
nnoremap <leader>nk :<c-u>exec v:count.'Tkill'<cr>
nnoremap <leader>nn :<c-u>Tnew<cr>
nnoremap <leader>nq :<c-u>exec v:count.'T quit'<cr>

nnoremap <leader>ns :TREPLSendLine<cr>
vnoremap <leader>ns :TREPLSendSelection<cr>

nnoremap <leader>nb :<c-u>bo Tnew<cr><c-w>j
nnoremap <leader>nv :<c-u>vert Tnew<cr><c-w>l

nnoremap <leader>nl :<c-u>bo Tnext<cr>
nnoremap <leader>nh :<c-u>bo Tprevious<cr>
" }}}2

" }}}1

" Autocommands {{{1

" Reset all augroup for vimrc
augroup vimrc
  autocmd!

  " Delete trailing spaces before saving
  autocmd BufWritePre * :%s/\s\+$//ge

  " Auto save and Auto Reload
  autocmd FocusGained, BufEnter * :silent! !
  autocmd FocusLost, WinLeave * :silent! w

  " Number and Relative number
  autocmd FocusGained * :set relativenumber
  autocmd FocusLost * :set number norelativenumber

  autocmd InsertEnter * :set number norelativenumber
  autocmd InsertLeave * :set relativenumber

  " View save and restore is used for saving and restoring folding
  " autocmd BufWrite * mkview
  " autocmd BufRead * silent loadview

  " Disable flash error
  if has("gui_running")
    if has("x11")
      autocmd VimEnter * set vb t_vb= " gvim resets it, so I set it up again
    endif
  endif

augroup end

" Autocommands on Plugins {{{2
augroup vimrc

  " Plugin NerdTREE
  autocmd VimEnter * call g:OpenNerdTree()

  " Plugin UltiSnips
  if !has('nvim')
    autocmd InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
  endif

  " Plugin vim-indent-guides
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=234 guibg=#1c1c1c
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=235 guibg=#262626


augroup END
" }}}2
" }}}1

" FileType {{{1

augroup vimrc

  " FileType: Go {{{2
  autocmd FileType go setlocal ts=4 sts=4 sw=4 noexpandtab
  " autocmd FileType go setlocal listchars+=tab:\ \ , " don't show tabs for go files

  autocmd FileType go nmap <leader>r <Plug>(go-run)
  autocmd FileType go nmap <leader>b <Plug>(go-build)
  autocmd FileType go nmap <leader>t <Plug>(go-test)
  autocmd FileType go nmap <leader>c <Plug>(go-coverage)

  autocmd FileType go nmap <Leader>I <Plug>(go-implements)
  autocmd FileType go nmap <Leader>i <Plug>(go-info)
  autocmd FileType go nmap <Leader>R <Plug>(go-rename)

  " Open documentation
  autocmd FileType go nmap <Leader>dg <Plug>(go-doc)
  autocmd FileType go nmap <Leader>dv <Plug>(go-doc-vertical)
  autocmd FileType go nmap <Leader>db <Plug>(go-doc-browser)
  " }}}2

  " Filetype: Help {{{2
  autocmd FileType help wincmd J " Open help in bottom window
  " }}}2

  " Filetype: Java {{{2
  autocmd FileType java setlocal ts=4 sts=4 sw=4 noexpandtab
  " }}}2

  " Filetype: Vim {{{2
  autocmd FileType vim setlocal foldmethod=marker
  " }}}2

augroup END
" }}}1

" Functions {{{1

" NERDTree {{{2

" Open NERDTree and put the focus on the next window
function! g:OpenNerdTree()

  " if is a directory, open the NERDTree
  let path = expand("%")
  if path =~ "NERD_tree_1"
    NERDTree
  end

  " NERDtree is open? move to next window, deletes the buffer and goes back
  let path = expand("%")
  if path =~ "NERD_tree_2"
    wincmd p
    bd
    wincmd p
  else
    wincmd p
  end
endfunction
" }}}2

" UltiSnips {{{2

" UltiSnips completion function that tries to expand a snippet. If there's no
" snippet for expanding, it checks for completion window and if it's
" shown, selects first element. If there's no completion window it tries to
" jump to next placeholder. If there's no placeholder it just returns TAB key
if !has('nvim')
  function! g:UltiSnips_Complete()
      call UltiSnips#ExpandSnippet()
      if g:ulti_expand_res == 0
          if pumvisible()
              return "\<C-n>"
          else
              call UltiSnips#JumpForwards()
              if g:ulti_jump_forwards_res == 0
                 return "\<TAB>"
              endif
          endif
      endif
      return ""
  endfunction
endif
" }}}2
" }}}1
